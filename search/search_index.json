{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"frkl.project-meta \u00b6 Manage and display metadata for a project created with the frkl.python-project template. Description \u00b6 Documentation still to be done. Downloads \u00b6 Binaries \u00b6 Linux Windows Mac OS X Development \u00b6 Requirements \u00b6 Python (version >=3.6) pip, virtualenv git make direnv (optional) Prepare development environment \u00b6 Notes: if using direnv , adjust the Python version in .envrc (should not be necessary) if not using direnv , you have to setup and activate your Python virtualenv yourself, manually, before running make init git clone https://gitlab.com/frkl/frkl.project-meta cd frkl.project-meta mv .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init make targets \u00b6 init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) binary : create binary for project (will install pyenv -- check scripts/build-binary for details) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages serve-docs : serve documentation pages (incl. auto-reload) clean : clean build directories For details (and other, minor targets), check the Makefile . Running tests \u00b6 > make test # or > make coverage Update project template \u00b6 This project uses cruft to apply updates to the base Python project template to this repository. Check out it's documentation for more information. cruft update # interactively approve changes, make changes if necessary git add * git commit -m \"chore: updated project from template\" Copyright & license \u00b6 Please check the LICENSE file in this repository (it's a short license!). Parity Public License 6.0.0 Copyright (c) 2020 frkl O\u00dc","title":"Home"},{"location":"#frklproject-meta","text":"Manage and display metadata for a project created with the frkl.python-project template.","title":"frkl.project-meta"},{"location":"#description","text":"Documentation still to be done.","title":"Description"},{"location":"#downloads","text":"","title":"Downloads"},{"location":"#binaries","text":"Linux Windows Mac OS X","title":"Binaries"},{"location":"#development","text":"","title":"Development"},{"location":"#requirements","text":"Python (version >=3.6) pip, virtualenv git make direnv (optional)","title":"Requirements"},{"location":"#prepare-development-environment","text":"Notes: if using direnv , adjust the Python version in .envrc (should not be necessary) if not using direnv , you have to setup and activate your Python virtualenv yourself, manually, before running make init git clone https://gitlab.com/frkl/frkl.project-meta cd frkl.project-meta mv .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init","title":"Prepare development environment"},{"location":"#make-targets","text":"init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) binary : create binary for project (will install pyenv -- check scripts/build-binary for details) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages serve-docs : serve documentation pages (incl. auto-reload) clean : clean build directories For details (and other, minor targets), check the Makefile .","title":"make targets"},{"location":"#running-tests","text":"> make test # or > make coverage","title":"Running tests"},{"location":"#update-project-template","text":"This project uses cruft to apply updates to the base Python project template to this repository. Check out it's documentation for more information. cruft update # interactively approve changes, make changes if necessary git add * git commit -m \"chore: updated project from template\"","title":"Update project template"},{"location":"#copyright-license","text":"Please check the LICENSE file in this repository (it's a short license!). Parity Public License 6.0.0 Copyright (c) 2020 frkl O\u00dc","title":"Copyright &amp; license"},{"location":"api-documentation/","text":"__init__ \u00b6 frkl \u00b6 frkl.project_meta \u00b6 log \u00b6 Top-level package for frkl.project-meta. frkl.project_meta.utils \u00b6 discover_installed_modules \u00b6 discover_installed_modules ( ignore_modules : Optional [ Iterable [ str ]] = None , only_modules : Optional [ Iterable [ str ]] = None ) -> Set [ types . ModuleType ] Method that tries to find all other (relevant) packages/base-modules which are contained in this application. Arguments : ignore_modules - a list of modules to ignore (to speed up parsing, defaults to in-build list) only_modules - if specified, only modules contained in this list are used (to speed up parsing) Results: - Set[ModuleType] - a set containing all relevant (base) modules that contain a '_frkl' sub-module. frkl.project_meta._frkl \u00b6 frkl.project_meta.interfaces \u00b6 frkl.project_meta.interfaces.cli \u00b6 frkl.project_meta.core \u00b6 ProjectMetadata Objects \u00b6 class ProjectMetadata ( object ) Class to hold all relevant information of a frkl-Python package metadata \u00b6 | @property | metadata () -> Mapping [ str , Any ] Method to retrieve metadata that is relevant to build a binary for this package. runtime_details \u00b6 | @property | runtime_details () -> Mapping [ str , Any ] Method to get information about the running package. This is mainly concerned about application artefact metadata, like build time, etc. get_app_dirs \u00b6 | get_app_dirs () -> Optional [ AppDirs ] Return 'AppDirs' object for this application. get_resources_folder \u00b6 | get_resources_folder () -> str Return the resources folder path for this application. set_global \u00b6 | set_global ( key : str , value : Any ) -> None Set a global variable for this application. get_global \u00b6 | get_global ( key : str ) -> Any Retrieve a global variable for this application. frkl.project_meta.defaults \u00b6 frkl.project_meta.pyinstaller \u00b6 process_string_template \u00b6 process_string_template ( template_string : str , replacement_dict : Optional [ Mapping [ str , Any ]] = None ) Replace template markers with values from a replacement dictionary within a string. Arguments : template_string : the template string replacement_dict : the dictionary with the replacement strings jinja_env : an existing jinja env to use, if specified, the following paramters will be ignored frkl.project_meta.documentation \u00b6 frkl.project_meta.documentation.mkdocs_macros_frkl \u00b6 define_env \u00b6 define_env ( env ) This is the hook for defining variables, macros and filters variables: the dictionary that contains the environment variables macro: a decorator function, to declare a macro.","title":"API Documentation"},{"location":"api-documentation/#__init__","text":"","title":"__init__"},{"location":"api-documentation/#frkl","text":"","title":"frkl"},{"location":"api-documentation/#frklproject_meta","text":"","title":"frkl.project_meta"},{"location":"api-documentation/#log","text":"Top-level package for frkl.project-meta.","title":"log"},{"location":"api-documentation/#frklproject_metautils","text":"","title":"frkl.project_meta.utils"},{"location":"api-documentation/#discover_installed_modules","text":"discover_installed_modules ( ignore_modules : Optional [ Iterable [ str ]] = None , only_modules : Optional [ Iterable [ str ]] = None ) -> Set [ types . ModuleType ] Method that tries to find all other (relevant) packages/base-modules which are contained in this application. Arguments : ignore_modules - a list of modules to ignore (to speed up parsing, defaults to in-build list) only_modules - if specified, only modules contained in this list are used (to speed up parsing) Results: - Set[ModuleType] - a set containing all relevant (base) modules that contain a '_frkl' sub-module.","title":"discover_installed_modules"},{"location":"api-documentation/#frklproject_meta_frkl","text":"","title":"frkl.project_meta._frkl"},{"location":"api-documentation/#frklproject_metainterfaces","text":"","title":"frkl.project_meta.interfaces"},{"location":"api-documentation/#frklproject_metainterfacescli","text":"","title":"frkl.project_meta.interfaces.cli"},{"location":"api-documentation/#frklproject_metacore","text":"","title":"frkl.project_meta.core"},{"location":"api-documentation/#projectmetadata-objects","text":"class ProjectMetadata ( object ) Class to hold all relevant information of a frkl-Python package","title":"ProjectMetadata Objects"},{"location":"api-documentation/#metadata","text":"| @property | metadata () -> Mapping [ str , Any ] Method to retrieve metadata that is relevant to build a binary for this package.","title":"metadata"},{"location":"api-documentation/#runtime_details","text":"| @property | runtime_details () -> Mapping [ str , Any ] Method to get information about the running package. This is mainly concerned about application artefact metadata, like build time, etc.","title":"runtime_details"},{"location":"api-documentation/#get_app_dirs","text":"| get_app_dirs () -> Optional [ AppDirs ] Return 'AppDirs' object for this application.","title":"get_app_dirs"},{"location":"api-documentation/#get_resources_folder","text":"| get_resources_folder () -> str Return the resources folder path for this application.","title":"get_resources_folder"},{"location":"api-documentation/#set_global","text":"| set_global ( key : str , value : Any ) -> None Set a global variable for this application.","title":"set_global"},{"location":"api-documentation/#get_global","text":"| get_global ( key : str ) -> Any Retrieve a global variable for this application.","title":"get_global"},{"location":"api-documentation/#frklproject_metadefaults","text":"","title":"frkl.project_meta.defaults"},{"location":"api-documentation/#frklproject_metapyinstaller","text":"","title":"frkl.project_meta.pyinstaller"},{"location":"api-documentation/#process_string_template","text":"process_string_template ( template_string : str , replacement_dict : Optional [ Mapping [ str , Any ]] = None ) Replace template markers with values from a replacement dictionary within a string. Arguments : template_string : the template string replacement_dict : the dictionary with the replacement strings jinja_env : an existing jinja env to use, if specified, the following paramters will be ignored","title":"process_string_template"},{"location":"api-documentation/#frklproject_metadocumentation","text":"","title":"frkl.project_meta.documentation"},{"location":"api-documentation/#frklproject_metadocumentationmkdocs_macros_frkl","text":"","title":"frkl.project_meta.documentation.mkdocs_macros_frkl"},{"location":"api-documentation/#define_env","text":"define_env ( env ) This is the hook for defining variables, macros and filters variables: the dictionary that contains the environment variables macro: a decorator function, to declare a macro.","title":"define_env"},{"location":"install/","text":"Installation \u00b6 There are three ways to install frkl.project-meta on your machine. Via a manual binary download, an install script, or installation of the python package. Binaries \u00b6 To install frkl.project-meta , download the appropriate binary from one of the links below, and set the downloaded file to be executable ( chmod +x project-meta ): Linux Windows Mac OS X Install script \u00b6 Alternatively, use the 'curly' install script for frkl.project-meta : curl https://gitlab.com/frkl/frkl.project-meta/-/raw/develop/scripts/install/frkl-project.sh | bash This will add a section to your shell init file to add the install location ( $HOME/.local/share/frkl/bin ) to your $PATH . You might need to source that file (or log out and re-log in to your session) in order to be able to use frkl-project : source ~/.profile Python package \u00b6 The python package is currently not available on pypi , so you need to specify the --extra-url parameter for your pip command. If you chooose this install method, I assume you know how to install Python packages manually, which is why I only show you an example way of getting frkl.project-meta onto your machine: > python3 -m venv ~/.venvs/frkl.project-meta > source ~/.venvs/frkl.project-meta/bin/activate > pip install --extra-index-url https://pkgs.frkl.io/frkl/dev --extra-index-url https://pkgs.frkl.dev/pypi frkl.project-meta Looking in indexes: https://pypi.org/simple, https://pkgs.frkl.io/frkl/dev Collecting frkl.project-meta Downloading http://pkgs.frkl.io/frkl/dev/%2Bf/ee3/f57bd91a076f9/frkl.project-meta-0.1.dev24%2Bgd3c4447-py2.py3-none-any.whl (28 kB) ... ... ... Successfully installed aiokafka-0.6.0 aiopg-1.0.0 ... ... ... > frkl-project --help Usage: frkl-project [OPTIONS] COMMAND [ARGS]... ... ...","title":"Install"},{"location":"install/#installation","text":"There are three ways to install frkl.project-meta on your machine. Via a manual binary download, an install script, or installation of the python package.","title":"Installation"},{"location":"install/#binaries","text":"To install frkl.project-meta , download the appropriate binary from one of the links below, and set the downloaded file to be executable ( chmod +x project-meta ): Linux Windows Mac OS X","title":"Binaries"},{"location":"install/#install-script","text":"Alternatively, use the 'curly' install script for frkl.project-meta : curl https://gitlab.com/frkl/frkl.project-meta/-/raw/develop/scripts/install/frkl-project.sh | bash This will add a section to your shell init file to add the install location ( $HOME/.local/share/frkl/bin ) to your $PATH . You might need to source that file (or log out and re-log in to your session) in order to be able to use frkl-project : source ~/.profile","title":"Install script"},{"location":"install/#python-package","text":"The python package is currently not available on pypi , so you need to specify the --extra-url parameter for your pip command. If you chooose this install method, I assume you know how to install Python packages manually, which is why I only show you an example way of getting frkl.project-meta onto your machine: > python3 -m venv ~/.venvs/frkl.project-meta > source ~/.venvs/frkl.project-meta/bin/activate > pip install --extra-index-url https://pkgs.frkl.io/frkl/dev --extra-index-url https://pkgs.frkl.dev/pypi frkl.project-meta Looking in indexes: https://pypi.org/simple, https://pkgs.frkl.io/frkl/dev Collecting frkl.project-meta Downloading http://pkgs.frkl.io/frkl/dev/%2Bf/ee3/f57bd91a076f9/frkl.project-meta-0.1.dev24%2Bgd3c4447-py2.py3-none-any.whl (28 kB) ... ... ... Successfully installed aiokafka-0.6.0 aiopg-1.0.0 ... ... ... > frkl-project --help Usage: frkl-project [OPTIONS] COMMAND [ARGS]... ... ...","title":"Python package"},{"location":"usage/","text":"Usage \u00b6 Getting help \u00b6 To get information for the frkl-project command, use the --help flag: > frkl-project --help Usage: frkl-project [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: metadata pyinstaller-config runtime-info update-project-metadata","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#getting-help","text":"To get information for the frkl-project command, use the --help flag: > frkl-project --help Usage: frkl-project [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: metadata pyinstaller-config runtime-info update-project-metadata","title":"Getting help"}]}